name: Terraform Deploy with OIDC and Environment Handling

on:
  push:
    branches:
      - main

env:
  TF_VERSION: 1.6.0
  AWS_ROLE: arn:aws:iam::593002333172:role/BE_Github_Actions
  AWS_REGION: ap-south-1

jobs:
  terraform:
    name: Terraform Plan and Apply
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: [dev, qa, uat, prod]  # list all environments
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check if vars file exists
        id: check-vars
        run: |
          if [ -f "${{ matrix.env }}.tfvars" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Skip if vars file not found
        if: steps.check-vars.outputs.exists == 'false'
        run: |
          echo "No TFVars file for ${{ matrix.env }}. Skipping..."
          exit 0

      - name: Cache Terraform providers
        uses: actions/cache@v3
        with:
          path: |
            .terraform
            .terraform.lock.hcl
          key: ${{ runner.os }}-terraform-${{ matrix.env }}-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-${{ matrix.env }}-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init -backend-config="path=terraform.tfstate"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -var-file="${{ matrix.env }}.tfvars" -out=tfplan

      - name: Upload tfplan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.env }}
          path: tfplan

  manual-approval-uat-prod:
    name: Wait for Manual Approval for UAT/Prod
    needs: terraform
    if: contains(['uat','prod'], matrix.env)
    runs-on: ubuntu-latest
    environment:
      name: ${{ matrix.env }}
    steps:
      - name: Manual approval pending...
        run: echo "Waiting for manual approval via GitHub Environment protection rules..."

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform, manual-approval-uat-prod]
    strategy:
      matrix:
        env: [dev, qa, uat, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Terraform providers
        uses: actions/cache@v3
        with:
          path: |
            .terraform
            .terraform.lock.hcl
          key: ${{ runner.os }}-terraform-${{ matrix.env }}-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-${{ matrix.env }}-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init -backend-config="path=terraform.tfstate"

      - name: Download tfplan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ matrix.env }}
          path: .

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
