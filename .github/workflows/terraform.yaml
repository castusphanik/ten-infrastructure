name: Terraform Deploy with OIDC, Validation & Manual Approval

on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    strategy:
      matrix:
        env: [dev, qa, uat, prod]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Terraform providers
        uses: actions/cache@v3
        with:
          path: |
            .terraform
            .terraform.lock.hcl
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::593002333172:role/BE_Github_Actions
          aws-region: ap-south-1

      - name: Check if tfvars exists
        id: check_tfvars
        run: |
          if [ -f "${{ matrix.env }}.tfvars" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init
        if: steps.check_tfvars.outputs.exists == 'true'
        run: |
      - name: Terraform Init
        if: steps.check_tfvars.outputs.exists == 'true'
        run: |
          terraform init \
            -backend-config="bucket=ten-terraform-statefile" \
            -backend-config="key=terraform/${{ matrix.env }}/terraform.tfstate" \
            -backend-config="region=ap-south-1" \
            -backend-config="encrypt=true" \
            -reconfigure

      - name: Terraform Validate
        if: steps.check_tfvars.outputs.exists == 'true'
        run: terraform validate

      - name: Terraform Plan
        if: steps.check_tfvars.outputs.exists == 'true'
        run: terraform plan -var-file="${{ matrix.env }}.tfvars" -out=tfplan

      - name: Upload tfplan artifact
        if: steps.check_tfvars.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.env }}
          path: tfplan

      - name: Wait for Manual Approval (UAT/PROD)
        if: steps.check_tfvars.outputs.exists == 'true' && (matrix.env == 'uat' || matrix.env == 'prod')
        uses: hmarr/auto-approve-action@v2
        with:
          message: "Manual approval required for ${{ matrix.env }} environment"
          comment: "Approve to continue Terraform Apply"

      - name: Download tfplan
        if: steps.check_tfvars.outputs.exists == 'true'
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ matrix.env }}
          path: .

      - name: Terraform Apply
        if: steps.check_tfvars.outputs.exists == 'true'
        run: terraform apply -auto-approve tfplan

# name: Terraform CI/CD with Environment Detection & Manual Approval

# on:
#   push:
#     branches:
#       - main

# jobs:
#   detect-envs:
#     name: Detect Available Environments
#     runs-on: ubuntu-latest
#     outputs:
#       envs: ${{ steps.set-envs.outputs.envs }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Detect .tfvars files
#         id: set-envs
#         run: |
#           ENVS=$(ls *.tfvars 2>/dev/null | sed 's/\.tfvars//g' | jq -R -s -c 'split("\n")[:-1]')
#           echo "Detected envs: $ENVS"
#           echo "envs=$ENVS" >> $GITHUB_OUTPUT

#   terraform-init:
#     name: Terraform Init
#     runs-on: ubuntu-latest
#     needs: detect-envs
#     strategy:
#       matrix:
#         env: ${{ fromJSON(needs.detect-envs.outputs.envs) }}
#     if: ${{ fromJSON(needs.detect-envs.outputs.envs) != '[]' }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: 1.6.0

#       - name: Configure AWS credentials via OIDC
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           role-to-assume: arn:aws:iam::593002333172:role/BE_Github_Actions
#           aws-region: ap-south-1

#       - name: Terraform Init
#         run: |
#           terraform init \
#             -backend-config="bucket=ten-terraform-statefile" \
#             -backend-config="key=terraform/${{ matrix.env }}/terraform.tfstate" \
#             -backend-config="region=ap-south-1" \
#             -backend-config="encrypt=true" \
#             -reconfigure

#   terraform-plan:
#     name: Terraform Plan
#     runs-on: ubuntu-latest
#     needs: terraform-init
#     strategy:
#       matrix:
#         env: ${{ fromJSON(needs.detect-envs.outputs.envs) }}
#     if: ${{ fromJSON(needs.detect-envs.outputs.envs) != '[]' }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: 1.6.0

#       - name: Configure AWS credentials via OIDC
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           role-to-assume: arn:aws:iam::593002333172:role/BE_Github_Actions
#           aws-region: ap-south-1

#       - name: Terraform Plan
#         run: terraform plan -var-file="${{ matrix.env }}.tfvars" -out=tfplan

#       - name: Upload tfplan
#         uses: actions/upload-artifact@v4
#         with:
#           name: tfplan-${{ matrix.env }}
#           path: tfplan

#   manual-approval-uat:
#     name: Manual Approval for UAT
#     runs-on: ubuntu-latest
#     needs: terraform-plan
#     if: contains(fromJSON(needs.detect-envs.outputs.envs), 'uat')
#     environment: uat  # must exist in GitHub Environments
#     steps:
#       - run: echo "Waiting for manual approval for UAT..."

#   manual-approval-prod:
#     name: Manual Approval for PROD
#     runs-on: ubuntu-latest
#     needs: terraform-plan
#     if: contains(fromJSON(needs.detect-envs.outputs.envs), 'prod')
#     environment: prod  # must exist in GitHub Environments
#     steps:
#       - run: echo "Waiting for manual approval for PROD..."

#   terraform-apply:
#     name: Terraform Apply
#     runs-on: ubuntu-latest
#     needs: 
#       - terraform-plan
#       - manual-approval-uat
#       - manual-approval-prod
#     strategy:
#       matrix:
#         env: ${{ fromJSON(needs.detect-envs.outputs.envs) }}
#     if: ${{ fromJSON(needs.detect-envs.outputs.envs) != '[]' }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: 1.6.0

#       - name: Configure AWS credentials via OIDC
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           role-to-assume: arn:aws:iam::593002333172:role/BE_Github_Actions
#           aws-region: ap-south-1

#       - name: Download tfplan
#         uses: actions/download-artifact@v4
#         with:
#           name: tfplan-${{ matrix.env }}
#           path: .

#       - name: Terraform Apply
#         run: terraform apply -auto-approve tfplan
